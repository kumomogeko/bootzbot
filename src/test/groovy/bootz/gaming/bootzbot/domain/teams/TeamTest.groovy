package bootz.gaming.bootzbot.domain.teams

import bootz.gaming.bootzbot.domain.sharedKernel.Admin
import bootz.gaming.bootzbot.domain.teams.teamlinks.Teamlink
import discord4j.common.util.Snowflake
import spock.lang.Specification

class TeamTest extends Specification {
    def discordAccount = Snowflake.of(Snowflake.DISCORD_EPOCH)

    def "Can add a Link"() {
        def teammitglied = new Teammitglied(discordAccount, Set.of(), "B")
        given:
        def team = new Team([new Teammitglied(discordAccount, Set.of(), "A"), teammitglied, new Teammitglied(discordAccount, Set.of(), "C")], [:], null)
        def linkId = "asdf"
        def teamlink = new Teamlink("Das ist ein Link", "https://bootz-gaming.com/bootz-gaming-teams/")

        when:
        team.addTeamLink(new AddTeamLinkCommand(teammitglied, linkId, teamlink,false))

        then:
        team.getLinks().containsKey(linkId)
        team.getLinks().get(linkId) == teamlink
    }

    def "Can use a link as custom OPGG"() {
        def admin = new Admin(Snowflake.of(2l))
        given:
        def team = new Team([new Teammitglied(discordAccount, Set.of(), "A"), new Teammitglied(discordAccount, Set.of(), "C")], [:],new Teamlink("Bootz invite Link", "https://discord.gg/aYumqmdP"))
        def linkId = "asdf"
        def teamlink = new Teamlink("Das ist ein Link", "https://bootz-gaming.com/bootz-gaming-teams/")

        when:
        team.addTeamLink(new AddTeamLinkCommand(admin, linkId, teamlink,true))

        then:
        team.getOpGG() == teamlink.getLink()
    }

    def "Rejects Links from a non member"() {
        def teammitglied = new Teammitglied(Snowflake.of(1l), Set.of(), "B")
        given:
        def team = new Team([new Teammitglied(discordAccount, Set.of(), "A"), new Teammitglied(discordAccount, Set.of(), "C")], [:], null)
        def linkId = "asdf"
        def teamlink = new Teamlink("Das ist ein Link", "https://bootz-gaming.com/bootz-gaming-teams/")

        when:
        team.addTeamLink(new AddTeamLinkCommand(teammitglied, linkId, teamlink,true))

        then:
        thrown(RuntimeException)
    }

    def "OP GG is automatically generated"() {
        given:
        def team = new Team([new Teammitglied(discordAccount, Set.of(), "A"), new Teammitglied(discordAccount, Set.of(), "B"), new Teammitglied(discordAccount, Set.of(), "C")], [:], null)
        when:
        def result = team.getOpGG()
        then:
        result == "https://www.op.gg/multisearch/euw?summoners=A,B,C"
    }

    def "Custom OP GG is used over autogenerated"() {
        given:
        def opggLink = new Teamlink("Das opgg des Teams", "https://www.op.gg/multisearch/euw?summoners=z,y,x")
        def team = new Team([new Teammitglied(discordAccount, Set.of(), "A"), new Teammitglied(discordAccount, Set.of(), "B"), new Teammitglied(discordAccount, Set.of(), "C")], ["opGG":opggLink], opggLink)
        when:
        def result = team.getOpGG()
        then:
        result == "https://www.op.gg/multisearch/euw?summoners=z,y,x"
    }
}
